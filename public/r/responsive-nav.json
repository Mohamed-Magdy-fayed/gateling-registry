{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-nav",
  "type": "registry:component",
  "description": "A responsive navigation component that adapts to different screen sizes.",
  "registryDependencies": [
    "button",
    "sheet",
    "navigation-menu",
    "collapsible"
  ],
  "files": [
    {
      "path": "src/registry/new-york/items/responsive-nav/components/responsive-nav.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button, buttonVariants } from \"@/components/ui/button\"\r\nimport { ChevronDownIcon, MenuIcon } from \"lucide-react\"\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetTrigger,\r\n  SheetClose,\r\n  SheetHeader,\r\n} from \"@/components/ui/sheet\"\r\nimport {\r\n  NavigationMenu,\r\n  NavigationMenuContent,\r\n  NavigationMenuItem,\r\n  NavigationMenuList,\r\n  NavigationMenuTrigger,\r\n  navigationMenuTriggerStyle,\r\n} from \"@/components/ui/navigation-menu\"\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\"\r\n\r\ntype ActionItem = { variant: \"action\"; action: () => void }\r\ntype LinkItem = { variant: \"link\"; href: string }\r\ntype ChildrenItem = { variant: \"children\"; children: NavItem[] }\r\ntype NavItemVariants = ActionItem | LinkItem | ChildrenItem\r\nexport type NavItem = {\r\n  label: string\r\n  icon?: React.ReactNode\r\n} & NavItemVariants\r\n\r\ninterface ResponsiveMenuContextType {\r\n  visibleItems: NavItem[]\r\n  hiddenItems: NavItem[]\r\n  setVisibleItems: React.Dispatch<React.SetStateAction<NavItem[]>>\r\n  setHiddenItems: React.Dispatch<React.SetStateAction<NavItem[]>>\r\n  items: NavItem[]\r\n}\r\n\r\nconst ResponsiveMenuContext = React.createContext<ResponsiveMenuContextType | undefined>(undefined)\r\n\r\nfunction useResponsiveMenu() {\r\n  const context = React.useContext(ResponsiveMenuContext)\r\n  if (!context) {\r\n    throw new Error(\"useResponsiveMenu must be used within a ResponsiveMenuProvider\")\r\n  }\r\n  return context\r\n}\r\n\r\nexport function ResponsiveMenuProvider({ items, children }: { items: NavItem[]; children: React.ReactNode }) {\r\n  const [visibleItems, setVisibleItems] = React.useState<NavItem[]>(items);\r\n  const [hiddenItems, setHiddenItems] = React.useState<NavItem[]>([]);\r\n\r\n  return (\r\n    <ResponsiveMenuContext.Provider value={{ visibleItems, hiddenItems, setVisibleItems, setHiddenItems, items }}>\r\n      <div className=\"w-full\">{children}</div>\r\n    </ResponsiveMenuContext.Provider>\r\n  );\r\n}\r\n\r\nexport function DesktopNav() {\r\n  const { visibleItems, items, setVisibleItems, setHiddenItems } = useResponsiveMenu()\r\n\r\n  const containerRef = React.useRef<HTMLDivElement>(null);\r\n  const itemsRef = React.useRef<(HTMLLIElement | null)[]>([]);\r\n\r\n  const MORE_BUTTON_WIDTH = 100;\r\n\r\n  React.useLayoutEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    const observer = new ResizeObserver(([entry]) => {\r\n      const containerWidth = entry.contentRect.width;\r\n      let accumulatedWidth = 100;\r\n      const newVisible: NavItem[] = [];\r\n      const newHidden: NavItem[] = [];\r\n\r\n      const itemWidths = itemsRef.current.map(ref => ref?.offsetWidth ?? 0);\r\n      const totalWidth = itemWidths.reduce((sum, width) => sum + width, 0);\r\n\r\n      const needsMoreButton = totalWidth > containerWidth;\r\n      const availableWidth = needsMoreButton ? containerWidth - MORE_BUTTON_WIDTH : containerWidth;\r\n\r\n      for (let i = 0; i < items.length; i++) {\r\n        const itemWidth = itemWidths[i];\r\n        if (accumulatedWidth + itemWidth <= availableWidth) {\r\n          newVisible.push(items[i]);\r\n          accumulatedWidth += itemWidth;\r\n        } else {\r\n          newHidden.push(...items.slice(i));\r\n          break;\r\n        }\r\n      }\r\n\r\n      setVisibleItems(newVisible);\r\n      setHiddenItems(newHidden);\r\n    });\r\n\r\n    observer.observe(containerRef.current);\r\n    return () => observer.disconnect();\r\n  }, [items]);\r\n\r\n  return (\r\n    <div className=\"w-full\" ref={containerRef}>\r\n      {/* This menu is ONLY for measurement. It is not visible. */}\r\n      <NavigationMenu className=\"absolute invisible h-0 w-full overflow-hidden\">\r\n        <NavigationMenuList>\r\n          {items.map((item, i) => (\r\n            <NavigationMenuItem key={item.label} ref={el => { itemsRef.current[i] = el; }}>\r\n              <span className={cn(navigationMenuTriggerStyle(), \"flex-shrink-0\")}>\r\n                {item.label}\r\n              </span>\r\n            </NavigationMenuItem>\r\n          ))}\r\n        </NavigationMenuList>\r\n      </NavigationMenu>\r\n\r\n      <NavigationMenu>\r\n        <NavigationMenuList>\r\n          {visibleItems.map((item) => (\r\n            <RenderItem item={item} isMobile={false} key={item.label} />\r\n          ))}\r\n        </NavigationMenuList>\r\n      </NavigationMenu>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function MobileNav() {\r\n  const { hiddenItems } = useResponsiveMenu()\r\n  if (hiddenItems.length === 0) return null\r\n\r\n  return (\r\n    <Sheet>\r\n      <SheetTrigger asChild>\r\n        <Button variant=\"ghost\">\r\n          <MenuIcon className=\"size-4\" />\r\n          <span className=\"sr-only\">More</span>\r\n        </Button>\r\n      </SheetTrigger>\r\n      <SheetContent>\r\n        <SheetHeader>Menu</SheetHeader>\r\n        <div className=\"p-4 flex flex-col gap-2 items-stretch\">\r\n          {hiddenItems.map((item) => (\r\n            <RenderItem item={item} isMobile={true} key={item.label} />\r\n          ))}\r\n        </div>\r\n      </SheetContent>\r\n    </Sheet>\r\n  )\r\n}\r\n\r\nfunction RenderItem({ item, isMobile }: { item: NavItem; isMobile: boolean }) {\r\n  const renderContent = () => {\r\n    switch (item.variant) {\r\n      case \"action\":\r\n        return (\r\n          <Button variant=\"ghost\" onClick={item.action}>\r\n            {item.icon} {item.label}\r\n          </Button>\r\n        )\r\n      case \"link\":\r\n        return (\r\n          <Button variant=\"ghost\" asChild className={cn(\"flex items-center gap-2\")}>\r\n            <a href={item.href}>{item.icon} {item.label}</a>\r\n          </Button>\r\n        )\r\n      case \"children\":\r\n        if (isMobile) {\r\n          return (\r\n            <Collapsible key={item.label}>\r\n              <CollapsibleTrigger className=\"group flex items-center justify-center w-full rounded-md p-2\" asChild>\r\n                <Button variant=\"ghost\" >\r\n                  {item.label} <ChevronDownIcon size={20} className=\"ltr:-rotate-90 rtl:rotate-90 group-data-[state=open]:rotate-0 transition-transform duration-200\" />\r\n                </Button>\r\n              </CollapsibleTrigger>\r\n              <CollapsibleContent className=\"p-4\">\r\n                {item.children.map((subItem) => (\r\n                  <RenderItem item={subItem} isMobile={true} key={subItem.label} />\r\n                ))}\r\n              </CollapsibleContent>\r\n            </Collapsible>\r\n          )\r\n        }\r\n        return (\r\n          <NavigationMenuItem key={item.label}>\r\n            <NavigationMenuTrigger className={`${buttonVariants({ variant: \"ghost\" })}`}>{item.label}</NavigationMenuTrigger>\r\n            <NavigationMenuContent>\r\n              <ul className=\"grid gap-3 p-4 \">\r\n                {item.children.map((subItem) => (\r\n                  <li key={subItem.label}>\r\n                    <RenderItem item={subItem} isMobile={false} />\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </NavigationMenuContent>\r\n          </NavigationMenuItem>\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  if (isMobile) {\r\n    if (item.variant === \"link\" || item.variant === \"action\") {\r\n      return <SheetClose asChild>{renderContent()}</SheetClose>\r\n    }\r\n    return renderContent()\r\n  }\r\n\r\n  if (item.variant === \"link\") {\r\n    return <NavigationMenuItem>{renderContent()}</NavigationMenuItem>\r\n  }\r\n  return renderContent()\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}